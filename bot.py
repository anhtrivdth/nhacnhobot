import json
import os
import threading
import time
from datetime import datetime
import pytz
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === C·∫•u h√¨nh ===
BOT_TOKEN = "7806552255:AAF0grPJ2p6a9haqzFgNacRNrXt-1ZipXv4"  # üîÅ Thay b·∫±ng token c·ªßa b·∫°n
JSON_FILE = 'reminders.json'
TIMEZONE = pytz.timezone('Asia/Ho_Chi_Minh')


# === X·ª≠ l√Ω JSON ===
def load_data():
    if not os.path.exists(JSON_FILE):
        with open(JSON_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False)
    with open(JSON_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(JSON_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def generate_id(data):
    return max([item["id"] for item in data], default=0) + 1


# === C√°c l·ªánh bot ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã Ch√†o b·∫°n! ƒê√¢y l√† bot nh·∫Øc thanh to√°n.\n\n"
        "‚Ä¢ /add [ng√†y] [n·ªôi dung] ‚Äì th√™m l·ªùi nh·∫Øc l·∫∑p l·∫°i h·∫±ng th√°ng\n"
        "‚Ä¢ /list ‚Äì xem danh s√°ch l·ªùi nh·∫Øc\n"
        "‚Ä¢ /remove [id] ‚Äì x√≥a l·ªùi nh·∫Øc theo ID"
    )

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("Sai c√∫ ph√°p. D√πng: /add [ng√†y] [n·ªôi dung]")
        return

    try:
        day = int(context.args[0])
        if not 1 <= day <= 31:
            await update.message.reply_text("Ng√†y ph·∫£i t·ª´ 1 ƒë·∫øn 31.")
            return
    except ValueError:
        await update.message.reply_text("Ng√†y ph·∫£i l√† s·ªë nguy√™n.")
        return

    text = ' '.join(context.args[1:]).strip()
    if not text:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p n·ªôi dung l·ªùi nh·∫Øc.")
        return

    data = load_data()
    new_item = {
        "id": generate_id(data),
        "user_id": update.effective_user.id,
        "day": day,
        "text": text
    }
    data.append(new_item)
    save_data(data)
    await update.message.reply_text(f"‚úÖ ƒê√£ th√™m l·ªùi nh·∫Øc: \"{text}\" v√†o ng√†y {day} h√†ng th√°ng. ID: {new_item['id']}")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = update.effective_user.id
    reminders = [r for r in data if r["user_id"] == user_id]
    if not reminders:
        await update.message.reply_text("üì≠ B·∫°n ch∆∞a c√≥ l·ªùi nh·∫Øc n√†o.")
    else:
        msg = "üìã Danh s√°ch l·ªùi nh·∫Øc:\n"
        for r in reminders:
            msg += f"üî∏ ID {r['id']} ‚Äì Ng√†y {r['day']} ‚Äì \"{r['text']}\"\n"
        await update.message.reply_text(msg)

async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("Sai c√∫ ph√°p. D√πng: /remove [id]")
        return

    rid = int(context.args[0])
    data = load_data()
    user_id = update.effective_user.id
    new_data = [r for r in data if not (r['id'] == rid and r['user_id'] == user_id)]

    if len(new_data) == len(data):
        await update.message.reply_text("Kh√¥ng t√¨m th·∫•y ID ph√π h·ª£p.")
    else:
        save_data(new_data)
        await update.message.reply_text(f"üóëÔ∏è ƒê√£ x√≥a l·ªùi nh·∫Øc c√≥ ID {rid}.")


# === T·ª± ƒë·ªông g·ª≠i nh·∫Øc m·ªói s√°ng ===
async def check_reminders(app):
    while True:
        now = datetime.now(TIMEZONE)
        if now.hour == 8 and now.minute == 0:
            data = load_data()
            for item in data:
                uid = item['user_id']
                text = item['text']
                remind_day = item['day']
                delta = remind_day - now.day
                msg = None
                if delta == 0:
                    msg = f"üö® G·∫•p! H√¥m nay l√† ng√†y thanh to√°n: {text}"
                elif delta == -1:
                    msg = f"‚è∞ C√≤n 1 ng√†y ƒë·∫øn ng√†y thanh to√°n: {text}"
                elif delta == -2:
                    msg = f"‚è∞ C√≤n 2 ng√†y ƒë·∫øn ng√†y thanh to√°n: {text}"
                if msg:
                    try:
                        await app.bot.send_message(chat_id=uid, text=msg)
                    except:
                        pass
        time.sleep(60)


def start_scheduler(app):
    thread = threading.Thread(target=lambda: app.create_task(check_reminders(app)))
    thread.daemon = True
    thread.start()


# === Ch·∫°y bot ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("remove", remove_command))

    start_scheduler(app)

    print("ü§ñ Bot ƒëang ch·∫°y...")
    app.run_polling()
